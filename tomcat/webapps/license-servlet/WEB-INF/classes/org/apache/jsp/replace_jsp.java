/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2024-04-04 07:57:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;
import ro.sync.licenseservlet.LicenseInfo;
import ro.sync.licenseservlet.LicenseStore;
import ro.sync.licenseservlet.BaseLicenseServlet;
import ro.sync.licenseservlet.BaseServletConstants;

public final class replace_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("ro.sync.licenseservlet.BaseServletConstants");
    _jspx_imports_classes.add("ro.sync.licenseservlet.LicenseStore");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("ro.sync.licenseservlet.BaseLicenseServlet");
    _jspx_imports_classes.add("java.io.FileInputStream");
    _jspx_imports_classes.add("ro.sync.licenseservlet.LicenseInfo");
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<link rel=\"icon\" type=\"image/png\" href=\"favicon.ico\">\r\n<link rel=\"stylesheet\" href=\"css/index.css\" type=\"text/css\">\r\n<title>&lt;oXygen/> XML License Server</title>\r\n</head>\r\n<body>\r\n  <h1 class=\"mainTitle\">&lt;oXygen/> XML License Server</h1>\r\n  <p><a href=\"index.jsp\" class=\"link\">&lt; Back to main page</a></p>\r\n  ");

  response.setHeader("Cache-Control", "no-cache"); //HTTP 1.1
  response.setHeader("Pragma", "no-cache"); //HTTP 1.0
  response.setDateHeader("Expires", 0); //prevents caching at the proxy server
  ServletContext servletContext = getServletContext();
  String activationCode = servletContext.getAttribute(BaseServletConstants.JSP_ACTIVATION_CODE).toString();
  
  boolean isBundledWithWebAuthor = "true".equals(System.getProperty("com.oxygenxml.webapp.product"));
  boolean isBundledWithContentFusion = "true".equals(System.getProperty("com.oxygenxml.content.fusion.product"));

  String errorMessage = (String) request.getSession().getAttribute(BaseServletConstants.JSP_ERROR_MESSAGE);
  request.getSession().removeAttribute(BaseServletConstants.JSP_ERROR_MESSAGE);
  if (errorMessage != null && !errorMessage.trim().isEmpty()) {
    errorMessage = errorMessage.replaceAll("\n", "<br>").replaceAll("\r", "");
  
      out.write("\r\n  <div class=\"error-msg\"><a href=\"replace.jsp\" title=\"Close\" class=\"close-button\">x</a>");
      out.print( errorMessage );
      out.write("</div>\r\n  ");
 } 
      out.write("\r\n\r\n  <p>Replacing the license key.</p>\r\n  <p>Paste your new license key in the form below, and activate it.<br/>\r\n  ");
 if (isBundledWithContentFusion) { 
      out.write("\r\n      <div class=\"error-msg valid-component\"><a href=\"index.jsp\" title=\"Close\" class=\"close-button\">x</a>\r\n        This product requires a <em>Content-Fusion</em> license key.\r\n      </div>\r\n  ");
 } 
      out.write("\r\n  The Machine Signature for this license server is: <strong><tt>");
      out.print( activationCode );
      out.write("</tt></strong>\r\n  </p>\r\n  ");

  String documentationURL = "";
  try {
    Properties prop = new Properties();
    prop.load(getServletContext().getResourceAsStream("/documentation.properties"));
    documentationURL =
        prop.getProperty("installation.setting.up.license.server")
        .replace("${license.servlet.version}", BaseLicenseServlet.getVersionNoBuild());
  } catch (Exception e) {}

  
      out.write("\r\n  <p>\r\n    For more information see <a target=\"_blank\" href=\"");
      out.print( documentationURL );
      out.write("\">Activating License Keys</a>\r\n  </p>\r\n\r\n  <form action=");
      out.print( BaseServletConstants.HOME_URI );
      out.write(" method=\"POST\">\r\n    <input type=\"hidden\" name=");
      out.print( BaseServletConstants.JSP_FORM );
      out.write(" value=\"noLicenseForm\">\r\n    <textarea rows=\"22\" cols=\"80\" name=");
      out.print( BaseServletConstants.JSP_LICENSE_TEXT );
      out.write(" placeholder=\"Paste license here...\"\r\n        id=\"noLicenseFormTextArea\"></textarea>\r\n    <input type=\"hidden\" name=\"originalUrl\" id=\"originalUrl\">\r\n    \r\n    <br />\r\n        <input type=\"submit\" value=\"Register / Activate\" id=\"noLicenseFormSubmitButton\" name=\"noLicenseFormSubmitButton\"\r\n          class=\"button\">\r\n        <a href=\"index.jsp\" class=\"button\">Cancel</a>\r\n        <div id=\"confirmLicenseDialogMask\"></div>\r\n        <div id=\"confirmLicenseDialog\">\r\n            <div class=\"dialog-header\">\r\n                <a title=\"Close\" class=\"close-button\">x</a>\r\n            </div>\r\n            <p>The activation process involves binding your license key to this license server deployment.</p>\r\n            <p>Once the process is complete you cannot activate the license key with another license server deployment.</p>\r\n            <p>If your license key is already activated, it will not be changed and will be used as is.</p>\r\n            <input type=\"submit\" value=\"Confirm Activation\" name=\"noLicenseFormConfirmButton\"\r\n");
      out.write("                id=\"noLicenseFormConfirmButton\" class=\"button\">\r\n        </div>\r\n  </form>\r\n</body>\r\n  ");
 if(isBundledWithContentFusion) { 
      out.write("\r\n    <script type=\"text/javascript\">window.enforcedComponent = \"Content-Fusion\";</script>\r\n  ");
 } 
      out.write("\r\n<script type=\"text/javascript\" src=\"js/jquery-3.5.1.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"js/main.js\"></script>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
