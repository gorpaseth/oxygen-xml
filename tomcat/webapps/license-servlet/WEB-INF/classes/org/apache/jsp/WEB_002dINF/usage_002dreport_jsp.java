/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2024-04-04 07:57:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.URLDecoder;
import java.sql.SQLException;
import java.util.Locale;
import java.util.GregorianCalendar;
import java.util.Calendar;
import java.lang.StringBuilder;
import ro.sync.db.Granularity;
import ro.sync.db.TimeInterval;
import ro.sync.db.TimeIntervalDescription;
import ro.sync.db.UsageData;
import ro.sync.db.BaseDBSupport;
import ro.sync.licenseservlet.BaseServletConstants;
import ro.sync.licenseservlet.LicenseInfo;
import ro.sync.licenseservlet.LicenseStore;

public final class usage_002dreport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLDecoder");
    _jspx_imports_classes.add("java.util.GregorianCalendar");
    _jspx_imports_classes.add("ro.sync.db.TimeIntervalDescription");
    _jspx_imports_classes.add("ro.sync.db.UsageData");
    _jspx_imports_classes.add("ro.sync.db.BaseDBSupport");
    _jspx_imports_classes.add("ro.sync.licenseservlet.BaseServletConstants");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("ro.sync.licenseservlet.LicenseStore");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.lang.StringBuilder");
    _jspx_imports_classes.add("ro.sync.licenseservlet.LicenseInfo");
    _jspx_imports_classes.add("ro.sync.db.Granularity");
    _jspx_imports_classes.add("ro.sync.db.TimeInterval");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
 
    final String UTF_8_ENCODING = "UTF-8";
    ServletContext servletContext = getServletContext();
    BaseDBSupport dbSupport = (BaseDBSupport) servletContext.getAttribute(BaseServletConstants.PARAM_DB_SUPPORT);
    int licenseKeyCount = (Integer) request.getAttribute(BaseServletConstants.PARAM_USAGE_LICENSE_KEY_COUNT);
    TimeInterval timeInterval = TimeInterval.getTimeInterval(request.getParameter(BaseServletConstants.PARAM_TIME_INTERVAL));
    try {
      timeInterval.setOffset(Integer.parseInt(request.getParameter(BaseServletConstants.PARAM_TIME_OFFSET)));
    } catch (NumberFormatException e) {
      // Neglect.
    }
    Granularity granularity = Granularity.getGranularity(request.getParameter(BaseServletConstants.PARAM_GRANULARITY));
    
    boolean isFloating = true;
    LicenseStore licenseStore = (LicenseStore) servletContext.getAttribute(BaseServletConstants.PARAM_LICENSE_STORE);
    LicenseInfo li = licenseStore.getLicenseInfo();
    if (li != null) {
	  isFloating = li.isFloating();
    }
    String serverName = "&lt;oXygen/> XML " + (isFloating ? "Floating " : "") + "License Server";

      out.write("\r\n\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n  <title>");
      out.print( serverName );
      out.write("</title>\r\n  <link rel=\"icon\" type=\"image/png\" href=\"../favicon.ico\" />\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/index.css\" />\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/jquery.bxslider.css\" />\r\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/custom.css\" />\r\n  <script type=\"text/javascript\" src=\"../js/jquery-3.5.1.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"../js/Chart.min.js\"></script>\r\n  <script type=\"text/javascript\" src=\"../js/jquery.bxslider.min.js\"></script>\r\n</head>\r\n<body>\r\n");

    // The usage report part.
    String dateString = "";
    
    Calendar c = new GregorianCalendar();
    c.setTimeInMillis(System.currentTimeMillis());
    response.setHeader("Cache-Control", "no-cache"); //HTTP 1.1
    response.setHeader("Pragma", "no-cache"); //HTTP 1.0
    response.setDateHeader("Expires", 0); //prevents caching at the proxy server

    boolean isForMonth = true;
    int monthOffset = 0;
    String dayOrHour = "daily";
    if (timeInterval == TimeInterval.DAY && isFloating) {
      c.set(Calendar.DAY_OF_MONTH, c.get(Calendar.DAY_OF_MONTH) + timeInterval.getOffset());
      dateString = c.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.ENGLISH) +
          " " + c.get(Calendar.DAY_OF_MONTH) + ", " + c.get(Calendar.YEAR);
      isForMonth = false;
      dayOrHour = "hourly";
      if (request.getParameter(BaseServletConstants.PARAM_MONTH_OFFSET) != null) {
        monthOffset = Integer.parseInt(request.getParameter(BaseServletConstants.PARAM_MONTH_OFFSET));  
      }
    } else {
      c.set(Calendar.MONTH, c.get(Calendar.MONTH) + timeInterval.getOffset());
      dateString = c.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.ENGLISH) +
          " " + c.get(Calendar.YEAR);
      if (request.getParameter(BaseServletConstants.PARAM_TIME_OFFSET) != null) {
        monthOffset = Integer.parseInt(request.getParameter(BaseServletConstants.PARAM_TIME_OFFSET));  
      }
    }

      out.write("\r\n    <h1 class=\"mainTitle\">");
      out.print( serverName );
      out.write(" Usage Statistics<br/>");
      out.print( dateString );
      out.write("</h1>\r\n    <p><a href=\"../index.jsp\" class=\"link\">&lt; Back to main page</a></p>\r\n    <p class=\"licenseKeyCount\">Maximum number of ");
 if (isFloating) { 
      out.write("concurrent ");
 } 
      out.write("licenses = ");
      out.print( licenseKeyCount );
      out.write("</p>\r\n    <p>The following chart shows the peak number of licenses that were consumed\r\n    and the total number of users that were rejected, on a ");
      out.print( dayOrHour );
      out.write(" basis.</p>\r\n    <p>The maximum number of consumed licenses are shown in <span class=\"green\">green</span>,\r\n    while the total number of rejected users are shown in <span class=\"red\">red</span>.\r\n    The <span class=\"blue\">blue</span> line corresponds to the maximum number of concurrent licenses available on the server.</p>\r\n    <p>This chart can be used to detect the amount of concurrent licenses that are needed to avoid having rejected users.</p>\r\n    <div class=\"timeContainerDiv\">\r\n      <ul class=\"timeContainer\"></ul>\r\n");
 if (!isForMonth) { 
      out.write("\r\n      <a id=\"back2Month\">Back to month view</a>\r\n");
 } 
      out.write("      \r\n    </div>\r\n    <div class=\"bigContainer\">\r\n      <div id=\"usage-legend\" class=\"chart-legend\"></div>\r\n      <div style=\"clear:both\"></div>\r\n\t    <div class=\"chartContainer\">\r\n\t      <div class=\"nodata\">No data for this ");
      out.print( timeInterval.getValue() );
      out.write("</div>\r\n\t      <canvas id=\"usage-graph\" class=\"usage-graph\"></canvas>\r\n\t    </div>\r\n    </div>\r\n");
 if (isForMonth && isFloating) { 
      out.write("\r\n    <p>Click on a bar to see how the license consumption evolved every hour for that particular day.</p>\r\n    <div class=\"emptyStuff\"></div>\r\n    <p>The following chart shows the peak number of licenses that were consumed per hour throughout the month.</p>\r\n    <p>This is useful for identifying the time of day when the most licenses were consumed.</p>\r\n    <div class=\"bigContainer\" id=\"peakContainer\">\r\n      <div id=\"peak-legend\" class=\"chart-legend\"></div>\r\n      <div style=\"clear:both\"></div>\r\n\t    <div class=\"chartContainer\">\r\n\t      <div class=\"nodata\">No data for this ");
      out.print( timeInterval.getValue() );
      out.write("</div>\r\n\t      <canvas id=\"peak-graph\" class=\"peak-graph\"></canvas>\r\n\t    </div>\r\n    </div>\r\n");
  }
    if (dbSupport != null) {
      try {
        UsageData[] usageGraph = dbSupport.getUsageGraph(timeInterval, granularity);
        UsageData[] rejectionGraph = dbSupport.getRejectionGraph(timeInterval, granularity);
        
        UsageData[][] peakUsageGraph = null;
        if (isForMonth && isFloating) {
          peakUsageGraph = dbSupport.getMonthlyHourPeakUsageGraph(timeInterval);
        }

      out.write("\r\n        <script type=\"text/javascript\">\r\n        \r\n        $(document).ready(function() {\r\n        \r\n        var valuesReject = [], valuesUsage = [], labels = [];\r\n");
      if (isForMonth && isFloating) { 
      out.write("        \r\n        var valuesPeakUsage = [], valuesPeakRejection = [], peakLabels = [];\r\n");
      }
        int maxUsage = 0;
        for (int i = 0; i < usageGraph.length; i++) {
          UsageData usageData = usageGraph[i];
          UsageData rejectData = rejectionGraph[i];
          maxUsage = Math.max(maxUsage, (int)(usageGraph[i].getData() + rejectionGraph[i].getData()));

      out.write("\r\n          valuesUsage.push(");
      out.print( usageData.getData() );
      out.write(");\r\n          valuesReject.push(");
      out.print( rejectData.getData() );
      out.write(");\r\n          labels.push('");
      out.print( usageData.getDescription() );
      out.write("');\r\n");
          
        }

      out.write("        \r\n        var availableLicensesLine =\r\n            Array.apply(null, Array(valuesUsage.length)).map(function(){return ");
      out.print( licenseKeyCount );
      out.write(" });\r\n");
        
        if (isForMonth && isFloating) {
          for (int i = 0; i < peakUsageGraph.length; i++) {

      out.write("          valuesPeakUsage.push(");
      out.print( peakUsageGraph[i][0].getData() );
      out.write(");\r\n            peakLabels.push('");
      out.print( peakUsageGraph[i][0].getDescription() );
      out.write("');\r\n            valuesPeakRejection.push(");
      out.print( peakUsageGraph[i][1].getData() );
      out.write(");\r\n");
        }

      out.write("          \r\n          var dayOffsets = [];\r\n");
        
          int[] dayOffsets = dbSupport.getDayOffsetsForMonth(timeInterval);
          for (int i = 0; i < dayOffsets.length; i++) {

      out.write("          dayOffsets.push(");
      out.print( dayOffsets[i] );
      out.write(");\r\n");
        }
        }

      out.write("\r\n        var consumedLicenses = '';\r\n        var rejectedUsers = '';\r\n");
      if (isForMonth) { 
      out.write("\r\n          consumedLicenses = \"Consumed licenses (maximum per day)\";\r\n          rejectedUsers = \"Rejected users (total per day)\";\r\n");
      } else { 
      out.write("\r\n          consumedLicenses = \"Consumed licenses (total per hour)\";\r\n          rejectedUsers = \"Rejected users (total per hour)\";\r\n");
      } 
      out.write("\r\n        var data = {\r\n            labels: labels, \r\n            datasets: [ \r\n                {\r\n                    type: 'line',\r\n                    label: 'Line Component',\r\n                    data: availableLicensesLine,\r\n                    borderColor: '#65A5DA',\r\n                    backgroundColor: \"transparent\",\r\n                    pointRadius: 0,\r\n                    pointHoverRadius: 0,\r\n                    pointHitRadius: 0,\r\n                },\r\n                { \r\n                    label: consumedLicenses,\r\n                    backgroundColor: \"#52803d\",\r\n                    hoverBackgroundColor: \"#3a6a23\",\r\n                    borderColor: \"#52803d\", \r\n                    data: valuesUsage, \r\n                },\r\n                { \r\n                    label: rejectedUsers,\r\n                    backgroundColor: \"#CC0000\",\r\n                    hoverBackgroundColor: \"#A70000\",\r\n                    borderColor: \"#CC0000\", \r\n                    data: valuesReject, \r\n                },\r\n            ] \r\n");
      out.write("        };\r\n");
    if (isForMonth && isFloating) { 
      out.write("\r\n        var peakData = {\r\n            labels: peakLabels, \r\n            datasets: [ \r\n                {\r\n                    type: 'line',\r\n                    label: 'Line Component',\r\n                    data: availableLicensesLine,\r\n                    borderColor: '#65A5DA',\r\n                    backgroundColor: \"transparent\",\r\n                    pointRadius: 0,\r\n                    pointHoverRadius: 0,\r\n                    pointHitRadius: 0,\r\n                },\r\n                { \r\n                    label: \"Consumed licenses (maximum per hour)\",\r\n                    backgroundColor: \"#52803d\",\r\n                    hoverBackgroundColor: \"#3a6a23\",\r\n                    borderColor: \"#52803d\", \r\n                    data: valuesPeakUsage, \r\n                },\r\n                { \r\n                    label: \"Rejected users (maximum per hour)\",\r\n                    backgroundColor: \"#CC0000\",\r\n                    hoverBackgroundColor: \"#A70000\",\r\n                    borderColor: \"#CC0000\", \r\n                    data: valuesPeakRejection, \r\n");
      out.write("                },\r\n            ] \r\n        };\r\n");
    }
	int maxTicksLimit = Math.min(10, licenseKeyCount);
	int fixedStepSize = (int) Math.max(1, Math.ceil(((float) licenseKeyCount) / maxTicksLimit));
	double x = Math.max(maxUsage, licenseKeyCount);
	maxTicksLimit = (int) Math.min(10, x);
	// Step size should be rounded up, always int.
	fixedStepSize = (int) Math.ceil(((double) x / maxTicksLimit));
	int max = Math.max((int) (fixedStepSize * maxTicksLimit), maxUsage);
	
	if (maxTicksLimit == 10) {
	  // Chart may have less than 10 ticks.
	  int updatedMaxTicks = (int) Math.ceil((double) maxUsage / fixedStepSize);
	  int newMax = updatedMaxTicks * fixedStepSize;
	  maxTicksLimit = updatedMaxTicks;
	  max = newMax;
	}

      out.write("      \r\n        window.legendToggle = function (e, datasetIndex, isUsage) {\r\n            var index = datasetIndex;\r\n            // Use \"usage\" or \"peak\" charts.\r\n            var ci = isUsage ? e.view.usageChart : e.view.peakChart;\r\n            var meta = ci.getDatasetMeta(index);\r\n            if ( index == 1 ) {\r\n            \t// When having usage data hidden, also hide the \"line\".\r\n            \tvar lineMeta = ci.getDatasetMeta(0);\r\n            \tlineMeta.hidden = lineMeta.hidden === null? !ci.data.datasets[0].hidden : null;\r\n            }\r\n            \r\n            // Hide/show the specified data set.\r\n            meta.hidden = meta.hidden === null? !ci.data.datasets[index].hidden : null;\r\n            \r\n            if (!!meta.hidden) {\r\n            \t$(e.target).closest('.legendItemMax').find('input[type=checkbox]').removeAttr('checked');\r\n            } else {\r\n\t            $(e.target).closest('.legendItemMax').find('input[type=checkbox]').prop('checked', true);\r\n            }\r\n\r\n            // We toggled a dataset. Rerender the chart\r\n");
      out.write("            ci.update();\r\n        };\r\n        \r\n        var commonOptions = {\r\n        \t\ttitle: {\r\n              display: true,\r\n              fontSize: 20,\r\n              fontColor: \"#337AB7\",\r\n            },\r\n        \t\tlegend: {\r\n        \t\t\t// Hide the \"original\" legend.\r\n              display: false\r\n            },\r\n            scales: {\r\n                xAxes:[{\r\n                \t// Present the data stacked.\r\n                \tstacked:true,\r\n                \t// No gridlines vertically.\r\n                \tgridLines: { display: false }\r\n                }], \r\n                yAxes:[{ \r\n                  scaleLabel: {\r\n                    display: true,\r\n                    labelString: 'License consumption'\r\n                  },\r\n                  // Present the data stacked.\r\n                  stacked:true,\r\n                  // Customize ticks min, max and step size.\r\n                  ticks: {\r\n                \t  beginAtZero: true,\r\n                \t  min: 0,\r\n                    max: ");
      out.print( max );
      out.write(",\r\n                    fixedStepSize: Math.ceil(");
      out.print( fixedStepSize );
      out.write(")\r\n                  }\r\n                }] \r\n              }\r\n        };\r\n        var usageOptions = {\r\n        \t\ttitle: {\r\n        \t\t\ttext: 'Concurrent license consumption per ");
      out.print( granularity.getValue() );
      out.write("'\r\n        \t\t},\r\n            legendCallback: function (chart) {\r\n              var text = [];\r\n              for (var i = 1; i < chart.data.datasets.length; i++) {\r\n                text.push('<div class=\"legendItemMax\" data-datasetIndex=\"' \r\n                    + chart.legend.legendItems[i].datasetIndex + \r\n                    '\" onclick=\"legendToggle(event, ' + chart.legend.legendItems[i].datasetIndex + ', true)\">');\r\n                \r\n                text.push('<input style=\"vertical-align: middle\" type=\"checkbox\" id=\"' + chart.data.datasets[i].label.replace(/\\s+/g, '') + '\" checked/>');  \r\n                text.push('<div class=\"legendColor\" style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></div>');\r\n                text.push(\"<div class='legendLabel' style='display:inline-block'>\" + chart.data.datasets[i].label + \"</div>\");\r\n                text.push(\"</div>\");\r\n              }\r\n              return text.join(\"\");\r\n            },\r\n");
      if (isForMonth && isFloating) { 
      out.write("\r\n            hover: {\r\n            \tonHover: function (e) {\r\n            \t\tif (e[0]) {\r\n            \t\t\t$(\"#usage-graph\").css(\"cursor\", \"pointer\");\r\n            \t\t} else {\r\n            \t\t\t$(\"#usage-graph\").css(\"cursor\", \"default\");\r\n            \t\t}\r\n            \t}\r\n            }\r\n");
      }
      out.write("\r\n        };\r\n");
    if (isForMonth && isFloating) { 
      out.write("        \r\n        var peakOptions = {\r\n            title: {\r\n              text: 'Concurrent license consumption per hour'\r\n            },\r\n            legendCallback: function (chart) {\r\n              var text = [];\r\n              for (var i = 1; i < chart.data.datasets.length; i++) {\r\n                text.push('<div class=\"legendItemMax\" data-datasetIndex=\"' \r\n                    + chart.legend.legendItems[i].datasetIndex + \r\n                    '\" onclick=\"legendToggle(event, ' + chart.legend.legendItems[i].datasetIndex + ', false)\">');\r\n                \r\n                text.push('<input style=\"vertical-align: middle\" type=\"checkbox\" id=\"' + chart.data.datasets[i].label.replace(/\\s+/g, '') + '\" checked/>');  \r\n                text.push('<div class=\"legendColor\" style=\"background-color:' + chart.data.datasets[i].backgroundColor + '\"></div>');\r\n                text.push(\"<div class='legendLabel' style='display:inline-block'>\" + chart.data.datasets[i].label + \"</div>\");\r\n                text.push(\"</div>\");\r\n");
      out.write("              }\r\n              return text.join(\"\");\r\n            }\r\n        };\r\n");
    } 
      out.write("  \r\n        if (");
      out.print( maxUsage );
      out.write(" == 0) {\r\n        \tvar noDataWarning = $('.nodata');\r\n        \tif (noDataWarning) {\r\n        \t\tnoDataWarning.css('display', 'block');\r\n        \t\tvar sideOffset = - noDataWarning.width() / 2;\r\n        \t\tnoDataWarning.css('margin-left',  sideOffset + 'px');\r\n        \t\tsideOffset = - noDataWarning.height() / 2;\r\n        \t\tnoDataWarning.css('margin-top',  sideOffset + 'px');\r\n        \t}\r\n        }\r\n        \r\n        var extendedOptions = {};\r\n        // Join the common options with the \"usage\" ones.\r\n        extendedOptions =\t$.extend(true, extendedOptions, commonOptions, usageOptions);\r\n        \r\n        var chartElement=document.getElementById('usage-graph');\r\n        // Create the usage chart.\r\n        window.usageChart = new Chart(chartElement, { type:'bar', data: data, options: extendedOptions });\r\n        usageChart.store = new Array();\r\n        // Replace the original legend with the one generated by us.\r\n        document.getElementById('usage-legend').innerHTML = usageChart.generateLegend();\r\n\r\n");
    if (isForMonth && isFloating) { 
      out.write("\r\n        extendedOptions = {}; \r\n        // Join the common options with the \"peak' ones.\r\n        extendedOptions = $.extend(true, extendedOptions, commonOptions, peakOptions);\r\n        \r\n        var chartPeakElement=document.getElementById('peak-graph');\r\n        // Create the peak chart.\r\n        window.peakChart = new Chart(chartPeakElement, { type:'bar', data: peakData, options: extendedOptions });\r\n        peakChart.store = new Array();\r\n        // Replace the original legend with the one generated by us.\r\n        document.getElementById('peak-legend').innerHTML = peakChart.generateLegend();\r\n");
    } 
      out.write("\r\n        var generateUrl = function (\r\n        \t\ttimeIntervalParam, timeIntervalValue, \r\n        \t\ttimeOffsetParam,   timeOffsetValue, \r\n        \t\tgranularityParam,  granularityValue,\r\n        \t\tmonthOffsetParam,  monthOffsetValue) {\r\n        \t\r\n          var theURI = window.location.origin + window.location.pathname\r\n                    + \"?\" + timeIntervalParam + \"=\" + timeIntervalValue\r\n                    + \"&\" + timeOffsetParam + \"=\" + timeOffsetValue\r\n                    + \"&\" + granularityParam + \"=\" + granularityValue;\r\n        \t\r\n          if (monthOffsetParam && monthOffsetValue) {\r\n        \t  theURI += \"&\" + monthOffsetParam + \"=\" + monthOffsetValue;\r\n          }\r\n          \r\n        \treturn theURI;\r\n        }\r\n");
      
      if (isFloating) {
        if (isForMonth) {

      out.write("        // Click on chart Bar.\r\n          chartElement.addEventListener(\"click\", function(e) {\r\n        \t  var activeElement = usageChart.getElementAtEvent(e);\r\n            if (activeElement && activeElement[0]) {\r\n            \tvar usageByHourUrl = \r\n                generateUrl(\r\n                   \"");
      out.print( BaseServletConstants.PARAM_TIME_INTERVAL );
      out.write("\", \"");
      out.print( TimeInterval.DAY.getValue() );
      out.write("\",\r\n                   \"");
      out.print( BaseServletConstants.PARAM_TIME_OFFSET );
      out.write("\",   dayOffsets[activeElement[0]._index],\r\n                   \"");
      out.print( BaseServletConstants.PARAM_GRANULARITY );
      out.write("\",   \"");
      out.print( Granularity.HOUR.getValue() );
      out.write("\",\r\n                   \"");
      out.print( BaseServletConstants.PARAM_MONTH_OFFSET );
      out.write("\",  ");
      out.print( timeInterval.getOffset() );
      out.write("\r\n                   );\r\n              var xmlHttp = new XMLHttpRequest(); \r\n                 xmlHttp.onreadystatechange = function() {\r\n                   if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\r\n                     window.location = usageByHourUrl;\r\n                   }\r\n                 } \r\n                 xmlHttp.open(\"GET\", usageByHourUrl, true); \r\n                 xmlHttp.send(null); \r\n            }\r\n          });\r\n");

        } else {

      out.write("          var back2MonthUrl = generateUrl(\r\n                 \"");
      out.print( BaseServletConstants.PARAM_TIME_INTERVAL );
      out.write("\", \"");
      out.print( TimeInterval.MONTH.getValue() );
      out.write("\",\r\n                 \"");
      out.print( BaseServletConstants.PARAM_TIME_OFFSET );
      out.write("\",   ");
      out.print( monthOffset );
      out.write(",\r\n                 \"");
      out.print( BaseServletConstants.PARAM_GRANULARITY );
      out.write("\",   \"");
      out.print( Granularity.DAY.getValue() );
      out.write("\"\r\n                 );\r\n            $('#back2Month').attr('href', back2MonthUrl);\r\n");
      }
      }

      out.write("\r\n        \r\n        var timeContainer = document.querySelector('.timeContainer');\r\n        var timeObj = {}, timeActivity = [];\r\n");

        TimeInterval monthInterval = timeInterval;
        monthInterval = TimeInterval.MONTH;
        monthInterval.setOffset(monthOffset);
        
        TimeIntervalDescription[] timeActivity = isForMonth ? dbSupport.getAllMonthsOfActivity()
                                                            : dbSupport.getAllDaysForMonth(monthInterval);

        for (int i = 0; i < timeActivity.length; i++) {
          if (timeActivity[i].getOffset() > 0) {
            // We are in positive range... This means we cannot predict future...
            break;
          }

      out.write("\r\n          timeObj.description=\"");
      out.print( timeActivity[i].getLabel() );
      out.write("\";\r\n          timeObj.offset=\"");
      out.print( timeActivity[i].getOffset() );
      out.write("\";\r\n          timeActivity.push(timeObj);\r\n          \r\n          timeContainer.innerHTML +=\r\n            \"<li data-offset='\" + timeObj.offset + \"' class='sliderItem'>\" + timeObj.description + \"</li>\";\r\n");
        
        }

      out.write("\r\n        // Need to get the current month offset.\r\n        var currentSlide = $('.sliderItem[data-offset=");
      out.print( timeInterval.getOffset() );
      out.write("]').addClass('activeSlide');\r\n        \r\n        var slidesPerPage = 9;\r\n        var mySlider = $('.timeContainer').bxSlider(\r\n        \t\t{\r\n        \t\t\tinfiniteLoop: false,\r\n        \t\t\thideControlOnEnd: true,\r\n        \t\t\tminSlides: slidesPerPage,\r\n        \t\t\tmaxSlides: slidesPerPage,\r\n        \t\t\tslideWidth: 80,\r\n        \t\t\tslideMargin: 5,\r\n        \t\t\t/* slideSelector: '.sliderItem', */\r\n        \t\t\tstartSlide: Math.floor( ($('.sliderItem').index(currentSlide) )/slidesPerPage),\r\n        \t\t\tpager: false,\r\n        \t\t}\r\n        );\r\n       \r\n     ");
 if (isFloating) { 
      out.write("   \r\n        \r\n        // Click on List item.\r\n        $('.sliderItem').click(function() {\r\n            if ($(this).attr('data-offset') && \r\n            \t\t$(this).attr('data-offset') != ");
      out.print( timeInterval.getOffset() );
      out.write(") {\r\n            \t\r\n            \tvar xmlHttp = new XMLHttpRequest();\r\n            \tvar onClickDestination = generateUrl(\r\n                        \"");
      out.print( BaseServletConstants.PARAM_TIME_INTERVAL );
      out.write("\",\r\n                        \"");
      out.print( isForMonth ? TimeInterval.MONTH.getValue() : TimeInterval.DAY.getValue() );
      out.write("\",\r\n                        \"");
      out.print( BaseServletConstants.PARAM_TIME_OFFSET );
      out.write("\",\r\n                        $(this).attr('data-offset'),\r\n                        \"");
      out.print( BaseServletConstants.PARAM_GRANULARITY );
      out.write("\",\r\n                        \"");
      out.print( isForMonth ? Granularity.DAY.getValue() : Granularity.HOUR.getValue() );
      out.write("\",\r\n                        \"");
      out.print( BaseServletConstants.PARAM_MONTH_OFFSET );
      out.write("\",\r\n                        ");
      out.print( monthOffset );
      out.write(");\r\n            \t\r\n            \txmlHttp.onreadystatechange = function() {\r\n            \t\tif (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\r\n            \t\t\twindow.location = onClickDestination;\r\n            \t\t}\r\n            \t}\r\n            \txmlHttp.open(\"GET\", onClickDestination, true);\r\n            \txmlHttp.send(null);\r\n            }                  \r\n        });\r\n    ");
 } 
      out.write("\r\n      });\r\n      </script>\r\n");

      } catch (SQLException e) {
        e.printStackTrace();
      }
    } else {
      // Error handling the DB !!!
    }

      out.write("\r\n</body>\r\n</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
